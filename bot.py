import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


os.getenv("TELEGRAM_BOT_TOKEN")
MODERATION_CHAT_ID = -1002303863795  # ID —á–∞—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
PUBLIC_CHANNEL_ID = -1002605169969   # ID –∫–∞–Ω–∞–ª–∞ Lawyers.Club
TELEGRAPH_LINK = "https://telegra.ph/Politika-v-otnoshenii-obrabotki-personalnyh-dannyh-03-14-4"

bot = Bot(token=getenv)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ö–Ω–æ–ø–∫–∞ "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"
start_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="leave_request")]
    ]
)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
@dp.message(lambda message: message.text == "/start")
async def start(message: types.Message):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç‚úåÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ **Lawyers.Club** ü§ì\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –í–∞–º —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∏—Å–∫ —é—Ä–∏—Å—Ç–∞ –∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç –µ—ë –Ω–∞ –∫–∞–Ω–∞–ª–µ **Lawyers.Club**.\n\n"
        "–ü–æ—Å–ª–µ —á–µ–≥–æ –í–∞—à—É –∑–∞—è–≤–∫—É —É–≤–∏–¥—è—Ç –≤—Å–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ üßë‚Äçüíª\n\n"
        "**–î–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—Éüëá**"
    )
    await message.answer(welcome_text, reply_markup=start_keyboard, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"
@dp.callback_query(lambda call: call.data == "leave_request")
async def handle_request(call: types.CallbackQuery):
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

    accept_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –Ø –ø—Ä–æ—á–∏—Ç–∞–ª(–∞) –∏ –ø—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è", callback_data="accept_terms")]
        ]
    )

    text = (
        "üìå **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫ —é—Ä–∏—Å—Ç–∞ –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ Lawyers.Club** —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram.\n\n"
        "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è **–í–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ** –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É **–ò–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è** –∏ **–æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è** –≤ Telegram, "
        "–ø–æ—Å–∫–æ–ª—å–∫—É —ç—Ç–∏ —Å–≤–µ–¥–µ–Ω–∏—è –º–æ–≥—É—Ç –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º.\n\n"
        "–û—Å—Ç–∞–≤–ª—è—è –∑–∞—è–≤–∫—É, **–í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ç–∞–∫–æ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è** –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ "
        f"[–ü–æ–ª–∏—Ç–∏–∫—É –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö]({TELEGRAPH_LINK})."
    )
    await call.message.answer(text, reply_markup=accept_keyboard, parse_mode="Markdown")

# –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "‚úÖ –Ø –ø—Ä–æ—á–∏—Ç–∞–ª(–∞) –∏ –ø—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è"
@dp.callback_query(lambda call: call.data == "accept_terms")
async def ask_city(call: types.CallbackQuery):
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

    text = (
        "üíª **–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è —é—Ä–∏—Å—Ç?**\n\n"
        "üèò –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É. –ù–∞–ø—Ä–∏–º–µ—Ä: **–¢–∞—à–∫–µ–Ω—Ç** (–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è).\n\n"
        "üåç –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ, —É–∫–∞–∂–∏—Ç–µ: **–û–Ω–ª–∞–π–Ω**."
    )
    await call.message.answer(text, parse_mode="Markdown")
    user_data[call.from_user.id] = {"stage": "waiting_for_city"}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
@dp.message(lambda message: user_data.get(message.from_user.id, {}).get("stage") == "waiting_for_city")
async def confirm_city(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id]["city"] = message.text
    user_data[user_id]["stage"] = "confirming_city"

    confirm_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_city_input"),
                InlineKeyboardButton(text="‚úÖ –î–∞–ª–µ–µ", callback_data="confirm_city")
            ]
        ]
    )

    text = (
        "üìç **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö (–õ–æ–∫–∞—Ü–∏—è).**\n\n"
        f"**–õ–æ–∫–∞—Ü–∏—è:** {message.text}\n\n"
        "–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **'–î–∞–ª–µ–µ'**."
    )
    await message.answer(text, reply_markup=confirm_keyboard, parse_mode="Markdown")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∫ –≤–≤–æ–¥—É –≥–æ—Ä–æ–¥–∞
@dp.callback_query(lambda call: call.data == "back_to_city_input")
async def back_to_city_input(call: types.CallbackQuery):
    await ask_city(call)


# –î–∞–ª–µ–µ -> –í–≤–æ–¥ –æ—Ç—Ä–∞—Å–ª–∏ –ø—Ä–∞–≤–∞
@dp.callback_query(lambda call: call.data == "confirm_city")
async def ask_law_field(call: types.CallbackQuery):
    user_data[call.from_user.id]["stage"] = "waiting_for_law_field"

    text = (
        "üíº **–í –∫–∞–∫–æ–π –æ—Ç—Ä–∞—Å–ª–∏ –ø—Ä–∞–≤–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è —é—Ä–∏—Å—Ç?**\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: **–£–≥–æ–ª–æ–≤–Ω–æ–µ –ø—Ä–∞–≤–æ, –°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ, –ñ–∏–ª–∏—â–Ω–æ–µ –ø—Ä–∞–≤–æ** –∏ —Ç.–¥."
    )
    await call.message.edit_text(text, parse_mode="Markdown")

    

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Ç—Ä–∞—Å–ª–∏ –ø—Ä–∞–≤–∞
@dp.message(lambda message: user_data.get(message.from_user.id, {}).get("stage") == "waiting_for_law_field")
async def confirm_law_field(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id]["law_field"] = message.text
    user_data[user_id]["stage"] = "confirming_law_field"

    confirm_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_law_field_input"),
                InlineKeyboardButton(text="‚úÖ –î–∞–ª–µ–µ", callback_data="confirm_law_field")
            ]
        ]
    )

    text = (
        "**–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö (–û—Ç—Ä–∞—Å–ª—å –ø—Ä–∞–≤–∞).**\n\n"
        f"**–û—Ç—Ä–∞—Å–ª—å –ø—Ä–∞–≤–∞:** {message.text}\n\n"
        "–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **'–î–∞–ª–µ–µ'**."
    )
    await message.answer(text, reply_markup=confirm_keyboard, parse_mode="Markdown")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∫ –≤–≤–æ–¥—É –æ—Ç—Ä–∞—Å–ª–∏ –ø—Ä–∞–≤–∞
@dp.callback_query(lambda call: call.data == "back_to_law_field_input")
async def back_to_law_field_input(call: types.CallbackQuery):
    await ask_law_field(call)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ" (–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏)
@dp.callback_query(lambda call: call.data == "confirm_law_field")
async def ask_task_description(call: types.CallbackQuery):
    user_id = call.from_user.id
    law_field = user_data.get(user_id, {}).get("law_field", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    user_data[user_id]["stage"] = "waiting_for_task_description"

    text = (
        "üè¢ **–û–ø–∏—à–∏—Ç–µ –≤–∫—Ä–∞—Ç—Ü–µ –∑–∞–¥–∞—á—É**\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: **–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –≤ —Å—É–¥–µ –ø–µ—Ä–≤–æ–π –∏–Ω—Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ –∏—Å–∫—É –æ —Ä–∞–∑–¥–µ–ª–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ –Ω–∞–∂–∏—Ç–æ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞.**"
    )
    await call.message.edit_text(text, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
@dp.message(lambda message: user_data.get(message.from_user.id, {}).get("stage") == "waiting_for_task_description")
async def confirm_task_description(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id]["task"] = message.text
    user_data[user_id]["stage"] = "confirming_task_description"

    confirm_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_task_description_input"),
                InlineKeyboardButton(text="‚úÖ –î–∞–ª–µ–µ", callback_data="confirm_task_description")
            ]
        ]
    )

    text = (
        "**–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö (–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏).**\n\n"
        f"**–ó–∞–¥–∞—á–∞:** {message.text}\n\n"
        "–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ **'–î–∞–ª–µ–µ'**."
    )
    await message.answer(text, reply_markup=confirm_keyboard, parse_mode="Markdown")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∫ –≤–≤–æ–¥—É –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
@dp.callback_query(lambda call: call.data == "back_to_task_description_input")
async def back_to_task_description_input(call: types.CallbackQuery):
    await ask_task_description(call)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ" –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
@dp.callback_query(lambda call: call.data == "confirm_task_description")
async def ask_price(call: types.CallbackQuery):
    user_data[call.from_user.id]["stage"] = "waiting_for_price"

    text = (
        "üè¢ **–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥, –∫–æ—Ç–æ—Ä—É—é –≥–æ—Ç–æ–≤ –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç**\n\n"
        "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n\n"
        "1Ô∏è‚É£ –£–∫–∞–∑–∞—Ç—å **—Ç–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å**. –ù–∞–ø—Ä–∏–º–µ—Ä: **100 000 —Ä—É–±–ª–µ–π**.\n"
        "2Ô∏è‚É£ –£–∫–∞–∑–∞—Ç—å **–¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω**. –ù–∞–ø—Ä–∏–º–µ—Ä: **–û—Ç 50 000 –¥–æ 100 000 —Ä—É–±–ª–µ–π**.\n"
        "3Ô∏è‚É£ –£–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º. –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –Ω–∞–ø–∏—à–∏—Ç–µ: **–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è —é—Ä–∏—Å—Ç–æ–º**.\n\n"
        "**–õ—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç** ‚Äì —Ç–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å, —Ç–∞–∫ –∫–∞–∫ —é—Ä–∏—Å—Ç—ã —Å—Ä–∞–∑—É –±—É–¥—É—Ç –ø–æ–Ω–∏–º–∞—Ç—å –≤–∞—à –±—é–¥–∂–µ—Ç."
    )
    await call.message.edit_text(text, parse_mode="Markdown")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
@dp.message(lambda message: user_data.get(message.from_user.id, {}).get("stage") == "waiting_for_price")
async def confirm_price(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id]["price"] = message.text
    user_data[user_id]["stage"] = "confirming_price"

    confirm_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_price_input"),
                InlineKeyboardButton(text="‚úÖ –î–∞–ª–µ–µ", callback_data="confirm_price")
            ]
        ]
    )

    text = (
        "**–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö (–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥).**\n\n"
        f"**–°—Ç–æ–∏–º–æ—Å—Ç—å:** {message.text}\n\n"
        "–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **'–î–∞–ª–µ–µ'**."
    )
    await message.answer(text, reply_markup=confirm_keyboard, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∫ –≤–≤–æ–¥—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥
@dp.callback_query(lambda call: call.data == "back_to_price_input")
async def back_to_price_input(call: types.CallbackQuery):
    await ask_price(call)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ" –ø–æ—Å–ª–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥
@dp.callback_query(lambda call: call.data == "confirm_price")
async def ask_response_time(call: types.CallbackQuery):
    user_data[call.from_user.id]["stage"] = "waiting_for_response_time"

    response_time_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="1 —á–∞—Å", callback_data="response_1h")],
            [InlineKeyboardButton(text="3 —á–∞—Å–∞", callback_data="response_3h")],
            [InlineKeyboardButton(text="12 —á–∞—Å–æ–≤", callback_data="response_12h")],
            [InlineKeyboardButton(text="24 —á–∞—Å–∞", callback_data="response_24h")],
            [InlineKeyboardButton(text="48 —á–∞—Å–æ–≤", callback_data="response_48h")],
            [InlineKeyboardButton(text="72 —á–∞—Å–∞", callback_data="response_72h")]
        ]
    )

    text = (
        "‚åö **–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è, –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —é—Ä–∏—Å—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∑–∞—è–≤–∫—É**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ üëá\n\n"
        "üîπ –ü–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ —Å—Ä–æ–∫–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞.\n\n"
        "üîπ –ï—Å–ª–∏ –í—ã –Ω–µ –Ω–∞—à–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è, –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ."
    )
    await call.message.edit_text(text, reply_markup=response_time_keyboard, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞
@dp.callback_query(lambda call: call.data.startswith("response_"))
async def confirm_response_time(call: types.CallbackQuery):
    user_id = call.from_user.id
    response_time = call.data.replace("response_", "").replace("h", " —á–∞—Å–æ–≤")
    user_data[user_id]["response_time"] = response_time
    user_data[user_id]["stage"] = "confirming_response_time"

    confirm_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_response_time"),
                InlineKeyboardButton(text="‚úÖ –î–∞–ª–µ–µ", callback_data="confirm_final")
            ]
        ]
    )

    text = (
        "**–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö (–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞).**\n\n"
        f"**–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞:** {response_time}\n\n"
        "–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **'–î–∞–ª–µ–µ'**."
    )
    await call.message.edit_text(text, reply_markup=confirm_keyboard, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
@dp.callback_query(lambda call: call.data == "back_to_response_time")
async def back_to_response_time(call: types.CallbackQuery):
    await ask_response_time(call)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ" –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞
@dp.callback_query(lambda call: call.data == "confirm_final")
async def show_final_request(call: types.CallbackQuery):
    user_id = call.from_user.id
    user_data[user_id]["stage"] = "final_confirmation"

    location = user_data[user_id].get("city", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    law_field = user_data[user_id].get("law_field", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    task_description = user_data[user_id].get("task", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    price = user_data[user_id].get("price", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    response_time = user_data[user_id].get("response_time", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

    text = (
        "üìã **‚ùóÔ∏è –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚ùóÔ∏è**\n"
        f"\nüìç **–õ–æ–∫–∞—Ü–∏—è:** {location}"
        f"\n‚öñ **–û—Ç—Ä–∞—Å–ª—å:** {law_field}"
        f"\nüìù **–ó–∞–¥–∞—á–∞:** {task_description}"
        f"\nüí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {price}"
        f"\n‚è≥ **–ü—Ä–µ–¥–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É:** {response_time}"
    )

    final_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å", callback_data="reset_form"),
                InlineKeyboardButton(text="üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="submit_request")
            ]
        ]
    )

    await call.message.edit_text(text, reply_markup=final_keyboard, parse_mode="Markdown")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–±—Ä–æ—Å–∏—Ç—å"
@dp.callback_query(lambda call: call.data == "reset_form")
async def reset_form(call: types.CallbackQuery):
    user_id = call.from_user.id
    user_data[user_id] = {}  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –£–¥–∞–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await start(call.message)


@dp.callback_query(lambda call: call.data == "submit_request")
async def submit_request(call: types.CallbackQuery):
    user_id = call.from_user.id
    location = user_data[user_id].get("city", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    law_field = user_data[user_id].get("law_field", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    task_description = user_data[user_id].get("task", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    price = user_data[user_id].get("price", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    response_time = user_data[user_id].get("response_time", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    username = f"@{call.from_user.username}" if call.from_user.username else f"[–ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É –∑–∞—è–≤–∫–∏](tg://user?id={user_id})"

    request_text = (
        "üìã **‚ùóÔ∏è –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚ùóÔ∏è**\n"
        f"\nüìç **–õ–æ–∫–∞—Ü–∏—è:** {location}"
        f"\n‚öñ **–û—Ç—Ä–∞—Å–ª—å:** {law_field}"
        f"\nüìù **–ó–∞–¥–∞—á–∞:** {task_description}"
        f"\nüí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {price}"
        f"\n‚è≥ **–ü—Ä–µ–¥–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É:** {response_time}\n"
        f"\nüì≤ [–ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É –∑–∞—è–≤–∫–∏](tg://user?id={user_id})"
    )

    moderation_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"reject_{user_id}"),
             InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user_id}")]
        ]
    )

    message = await bot.send_message(MODERATION_CHAT_ID, request_text, reply_markup=moderation_keyboard, parse_mode="Markdown")
    user_data[user_id]["moderation_message_id"] = message.message_id

    apply_again_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="leave_request")]
        ]
    )

    await call.message.edit_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!", reply_markup=apply_again_keyboard)



@dp.callback_query(lambda call: call.data.startswith("approve_"))
async def approve_request(call: types.CallbackQuery):
    user_id = int(call.data.split("_")[1])  # –ü–æ–ª—É—á–∞–µ–º user_id –∑–∞—è–≤–∫–∏
    user_info = user_data.get(user_id, {})  # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    if not user_info:
        await call.answer("–û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    location = user_info.get("city", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    law_field = user_info.get("law_field", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    task_description = user_info.get("task", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    price = user_info.get("price", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    response_time = user_info.get("response_time", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    
    contact_link = f"[–ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É –∑–∞—è–≤–∫–∏](tg://user?id={user_id})"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π user_id
    
    request_text = (
        "üìã **‚ùóÔ∏è –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚ùóÔ∏è**\n"
        f"\nüìç **–õ–æ–∫–∞—Ü–∏—è:** {location}"
        f"\n‚öñ **–û—Ç—Ä–∞—Å–ª—å:** {law_field}"
        f"\nüìù **–ó–∞–¥–∞—á–∞:** {task_description}"
        f"\nüí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {price}"
        f"\n‚è≥ **–ü—Ä–µ–¥–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫ –æ—Ç–∫–ª–∏–∫–∞:** {response_time}\n"
        f"\nüì≤ {contact_link}"
    )

    await bot.send_message(PUBLIC_CHANNEL_ID, request_text, parse_mode="Markdown")

    await call.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")

    await bot.delete_message(chat_id=MODERATION_CHAT_ID, message_id=call.message.message_id)

    


@dp.callback_query(lambda call: call.data.startswith("reject_"))
async def reject_request(call: types.CallbackQuery):
    user_id = int(call.data.split("_")[1])

    retry_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É", callback_data="leave_request")]
        ]
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–∞–∑–µ
    await bot.send_message(
        user_id, 
        "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n\n–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –µ—â–µ —Ä–∞–∑.", 
        reply_markup=retry_keyboard, 
        parse_mode="Markdown"
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    await call.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞.", show_alert=False)

    # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏–∑ —á–∞—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

    




async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
